<?php

namespace app\domains\Book;

use app\models\Book;

/**
 * Интерфейс сервиса для бизнес-логики книг
 * 
 * Определяет контракт для операций с бизнес-логикой книг.
 * Реализует паттерн Service для инкапсуляции сложной бизнес-логики,
 * включая работу с авторами, обложками и уведомлениями подписчиков.
 * 
 * @package app\domains\Book
 * @author Zernov Oleg <oi.zernov@gmail.com>
 * @since 1.0
 */
interface BookServiceInterface
{
    /**
     * Создание новой книги
     * 
     * Обрабатывает создание новой книги с валидацией данных,
     * привязкой авторов, обработкой обложки и уведомлением подписчиков.
     * 
     * @param Book $book Объект книги для создания
     * @param array $data Массив данных для заполнения модели (включая авторов)
     * @return Book|null Созданный объект книги или null в случае ошибки
     */
    public function create(Book $book, array $data): ?Book;

    /**
     * Обновление существующей книги
     * 
     * Обрабатывает обновление данных книги с валидацией,
     * обновлением связей с авторами и сохранением изменений.
     * 
     * @param Book $book Объект книги для обновления
     * @param array $data Массив новых данных для обновления (включая авторов)
     * @return Book|null Обновленный объект книги или null в случае ошибки
     */
    public function update(Book $book, array $data): ?Book;

    /**
     * Удаление книги
     * 
     * Обрабатывает удаление книги с проверкой бизнес-правил,
     * очисткой связанных данных (авторы, подписки) и файлов обложек.
     * 
     * @param Book $book Объект книги для удаления
     * @return bool Результат операции удаления
     */
    public function delete(Book $book): bool;
}
